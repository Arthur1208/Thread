// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  @@map("users")
  posts    Post[]
  // Relation avec les commentaires créés par cet utilisateur
  comments Comment[]
  // Relation avec les likes émis par cet utilisateur
  likes    Like[]
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}


model Post {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  caption   String
  dateTime  DateTime @default(now())
  comments  Comment[]
  images    Image[]
  likes     Like[]
  // Champ pour stocker le nombre de likes
  likeCount Int @default(0)

}





model Comment {
  id        String   @id @default(cuid())
  caption   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  images    Image[]
  likes     Like[]
  // Champ pour stocker le nombre de likes
  likeCount Int @default(0)
  parentComment  Comment? @relation("CommentReplies", fields: [parentCommentId], references: [id])
  parentCommentId String?
  childComments  Comment[] @relation("CommentReplies")

}


model Like {
  id         String  @id @default(cuid())
  user       User    @relation(fields: [userId], references: [id])
  userId     String
  post       Post?   @relation(fields: [postId], references: [id])
  postId     String?
  comment    Comment? @relation(fields: [commentId], references: [id])
  commentId  String?
  liked      Boolean
}

model Image {
  id       String    @id @default(cuid())
  url      String
  // Relation avec les posts qui utilisent cette image
  posts    Post[]    @relation
  // Relation avec les commentaires qui utilisent cette image
  comments Comment[] @relation
}
